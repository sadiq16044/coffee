<!DOCTYPE html>
<html>

<head>
    <title>RoundSlider</title>
    <script src="/js/jquery-1.11.3.min.js"></script>
    <link href="/js/roundslider.min.css" rel="stylesheet" />
    <script src="/js/roundslider.min.js"></script>
    <link href="/fonts/fonts.css" rel="stylesheet" />
    <!-- <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css"> -->
    <link rel="stylesheet" href="/css/bootstrap/bootstrap.css">
    <!-- <link rel="stylesheet" href="/css/bootstrap/bootstrap-reboot.css"> -->
    <!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/js/bootstrap.min.js"></script> -->
    <script src="/js/bootstrap.min.js"></script>
</head>

<body style="background-color: black;">

    <input type="hidden" id="temp" name="temp" value="<%= parameters.temperature%>">
    <input type="hidden" id="druck" name="druck" value="<%= parameters.druck%>">
    <input type="hidden" id="bezug" name="bezug" value="<%= parameters.bezugszeit%>">
    <input type="hidden" id="standBy" name="standBy" value="<%= parameters.standBy%>">

    <div id="fade1" class="fade-page" style="color: white; display: none;">
        <img src="/images/branding.png" style="width: 400px; height: 150px; margin: 0;" alt="">
    </div>

    <div id="full-page1" class="full-page" style="display: none;">
        <div id="myCarousel-indicators" class="carousel slide carousel-fade" data-touch="true" data-ride="carousel">

            <ol class="carousel-indicators">
                <li onclick="(()=>{valueChange = false})" id="slide0" data-target="#myCarousel-indicators" data-slide-to="0" class="active"></li>
                <li id="slide1" data-target="#myCarousel-indicators" data-slide-to="1"></li>
                <li id="slide2" data-target="#myCarousel-indicators" data-slide-to="2"></li>
                <li id="slide3" data-target="#myCarousel-indicators" data-slide-to="3"></li>
                <li id="slide4" data-target="#myCarousel-indicators" data-slide-to="4"></li>
            </ol>

            <div class="carousel-inner">
                <div class="carousel-item active">

                    <div id="progress-circle">
                        <div class="progress-gradient"></div>
                        <div id="progress-bar" style="margin-top: 105px;">
                        </div>
                    </div>

                    <div id="not-pushed" style="display: none;">
                        <div class="start-coffee">
                            <button id="start_button" style="background: none; margin: 0px; padding: 0px; width: 250px; height: 250px; border: none; outline: none;"><img src="/images/hme_btn.png"></button>
                        </div>
                    </div>

                    <div id="pushed" style="display: none;">
                        <div id="making_time" style="display: none;">
                            <button id="stop_button" style="background: none; margin-left: 125px; margin-top: 125px; padding: 0px; width: 250px; height: 250px; border: none; outline: none;"><img src="/images/stp_btn.png"></button>
                            <p id="making_time_text"></p>
                        </div>
                    </div>
                </div>
                <div class="carousel-item">
                    <center>
                        <p id="parameter-name" style="color: rgba(153, 102, 114, 1);">Temperature</p>
                    </center>
                    <div class="circle-gradient"></div>
                    <div id="temp-slider" class="circular-slider">
                    </div>
                </div>
                <div class="carousel-item">
                    <center>
                        <p id="parameter-name" style="color: rgba(102, 123, 153, 1);">Druck</p>
                    </center>
                    <div class="circle-gradient"></div>
                    <div id="druck-slider" class="circular-slider">
                    </div>
                </div>
                <div class="carousel-item">
                    <center>
                        <p id="parameter-name" style="color: rgba(153, 143, 102, 1);">Bezugszeit</p>
                    </center>
                    <div class="circle-gradient"></div>
                    <div id="bezug-slider" class="circular-slider">
                    </div>
                </div>
                <div class="carousel-item">
                    <center>
                        <p id="parameter-name" style="color: rgba(122, 153, 102, 1);">Standby</p>
                    </center>
                    <div class="circle-gradient"></div>
                    <div id="standBy-slider" class="circular-slider">
                    </div>
                </div>
            </div>
        </div>
    </div>


</body>

<script>
    ////////////////////////////////////// sse setup //////////////////////////////////////////////////
    const es = new EventSource("http://localhost:3003/stream");

    es.addEventListener('data', function(event) {
        console.log('Message from event stream');
        console.log(JSON.parse(event.data));
        let data = JSON.parse(event.data);
        let response = data.response;
        if (data.action) {
            received_response(response.order, response.value);
        } else if (data.msg == 'connected') {
            update_ready = true;
            location.reload(1);
        }
    });

    ///////////////////////////////////////////////////////////////////////////////////////////////////
    let prev_temperature = 0;
    let progress_counter = 0;
    let making_counter = 0;
    let progress_bar;
    let making_timer;
    let valueChange = false;

    function tooltipTemp(args) {
        let temp = parseFloat(args.value).toFixed(1).toString().replace('.', ',');
        return temp + "<span style='color: rgba(153, 102, 114, 1); font-size: 50px; white-space: pre;'><center>°C</center></span>";
        // return "<span style='color: white;'>" + temp + "</span>" + " <br> °C";
    }

    function tooltipDruck(args) {
        let temp = parseFloat(args.value).toFixed(1).toString().replace('.', ',');
        return temp + "<span style='color: rgba(102, 123, 153, 1); font-size: 50px; white-space: pre;'><center>bar</center></span>";
        // return "<span style='color: white;'>" + temp + "</span>" + " <br> bar";
    }

    function tooltipBezug(args) {
        let temp = parseFloat(args.value).toFixed(1).toString().replace('.', ',');
        return temp + "<span style='color: rgba(153, 143, 102, 1); font-size: 50px; white-space: pre;'><center>sek</center></span>";
        // return "<span style='color: white;'>" + temp + "</span>" + " <br> sek";
    }

    function tooltipStandby(args) {
        if (args.value == 0) return 'OFF';
        else return args.value + "<span style='color: rgba(122, 153, 102, 1); font-size: 50px; white-space: pre;'><center>min</center></span>";
        // return "<span style='color: white;'>" + args.value + "</span>" + " <br> min";
    }

    function tooltipProgress(args) {
        return args.value + "%";
    }

    function progressBar() {
        progress_counter++;
        $("#progress-bar").roundSlider("setValue", progress_counter);
        if (progress_counter >= 100) { // stopping progress bar increment value
            clearInterval(progress_bar);
            setTimeout(function() { // things to do after 9 minutes progress bar
                $("#progress-bar").roundSlider("setValue", 0);
                $('#progress-circle').fadeOut(500); // fadeout the progress bar
                setTimeout(() => $('#not-pushed').fadeIn(1000), 500) // showing the carousel
            }, 1000); // time of progress bar to complete 100%
        }
    }

    function makingTime() {
        // making_counter += 0.1;
        making_counter++;
        $("#making_time_text").text(parseFloat(making_counter * 0.1).toFixed(1).toString().replace('.', ','));
        console.log(making_counter * 0.1)
        if (making_counter >= parseInt($("#bezug").val() * 10)) { // stopping progress bar increment value
            // if (making_counter <= 0) { // stopping progress bar increment value
            clearInterval(making_timer);
            setTimeout(function() {
                $('#pushed').fadeOut(500); // fadeout the after pushed button
                $('#making_time').fadeOut(500); // fadeout the after pushed button
                making_counter = 0;
                update_ready = true; // to send data if it changes during making coffee
                startFlag = false; // coffee making completed
                setTimeout(() => {
                    $('#not-pushed').fadeIn(1000); // fadeIn the before pushed button
                    $('.carousel-indicators').fadeIn(1000); // showing the carousel
                }, 500)
            }, 4000);
        }
    }
    ////////////////////////////////////////////// Functions for Serial ////////////////////////////////////////////////
    let Order = {
        HELLO: 0,
        ALREADY_CONNECTED: 1,
        ERROR: 2,
        RECEIVED: 3,
        TEMPERATURE: 4,
        PRESSURE: 5,
        TIME: 6,
        START: 7,
        STOP: 8,
        SHUTDOWN: 9,
        STARTED: 10,
        TEMPERATURE2: 11,
        HEATING: 12,
        ONSTATE: 13,
        STANDBY: 14,
        PING: 15
    };

    let abortWork = false;
    let startFlag = false;
    let stopFlag = false;
    let noStop = false;
    let onState = 0;
    let prev_onState = 1;
    let errorNumber = 0;
    let parametersWrite = false;
    let heated = 0;
    let showCoffeeFlag = true;
    let update_ready = false;
    let dragging = false;

    async function received_response(order, value) {

        switch (order) {
            case Order.ERROR:
                errorNumber = value;
                break;
            case Order.HEATING:
                heated = value;
                break;
            case Order.START:
                making_timer = setInterval(makingTime, 100);
                break;
            case Order.ONSTATE:
                onState = value;
                if (onState == 1 && prev_onState != onState) {
                    $("#fade1").fadeIn(2000); // showing the logo in 2 secs with fading effects
                    setTimeout(() => {
                        $("#fade1").fadeOut(2000); // hiding the logo in 2 secs with fading effects
                        setTimeout(() => $('#full-page1').fadeIn(1000), 2000); // showing the body content
                    }, 2000);
                } else if (onState == 0 && prev_onState != onState) {
                    $('#full-page1').fadeOut(500); // hiding the body content
                    $("#fade1").fadeIn(2000); // removing the div after 5 secs with fading effects
                    setTimeout(() => $("#fade1").fadeOut(2000), 2000);
                }
                prev_onState = onState;
                break;
        }
    }

    async function send(order, value) {

        let sendText;
        sendText = `${order}<${parseInt(value)}>`;
        console.log('send');
        data = {
            sendText: sendText,
            parametersUpdate: parametersWrite,
            parameters: {
                temperature: $("#temp").val(),
                druck: $("#druck").val(),
                bezugszeit: $("#bezug").val(),
                standBy: $("#standBy").val(),
            }
        }

        $.ajax({
                url: "http://localhost:3003/send",
                method: "POST",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                dataType: 'json'
            })
            .done(function(msg) {
                console.log('First response');
                console.log(msg)
            });
    }

    async function start() {

        console.log("START");
        startFlag = true;
        abortWork = false;
        stopFlag = false;
        parametersWrite = true; // to update the parameters in disk file
        await send(Order.START, 0); // sending to start to make coffee
    }

    async function stop() {
        //showCoffee();
        stopFlag = true;
        abortWork = true;
        startFlag = false;
        // eel.order_stop();
        parametersWrite = false;
        await send(Order.STOP, 0); // sending to start to make coffee

    }


    $(document).ready(function() {
        console.log("Screeen Height: " + screen.height)
        $('.carousel').carousel({
            interval: false,
        });
        $('#myCarousel-indicators').on('slide.bs.carousel', async function(event) {
            console.log('I am sliding ' + valueChange)
            console.log('startFlag ' + startFlag)
            if (valueChange || startFlag) {
                event.preventDefault();
                valueChange = false;
            }
            await send(Order.STANDBY, (parseFloat($("#standBy").val())));
        });
        $("#start_button").click(async function() {

            // $.ajax({ // sending values to db
            //     method: 'POST',
            //     url: '/update-parameters',
            //     dataType: 'json',
            //     data: {
            //         temperature: $("#temp").val(),
            //         druck: $("#druck").val(),
            //         bezugszeit: $("#bezug").val(),
            //         standBy: $("#standBy").val(),
            //     }
            // }).done(function(result) {
            //     console.log(result)
            // });


            $('#not-pushed').fadeOut(500); // fadeout the before pushed button
            $('.carousel-indicators').fadeOut(500); // showing the carousel
            setTimeout(() => { // showing stop button
                making_counter = 0;
                $("#making_time_text").text(parseFloat(making_counter * 0.1).toFixed(1).toString().replace('.', ','));
                $('#making_time').fadeIn(500);
                $('#pushed').fadeIn(500); // fadeIn the after pushed button
            }, 500);
            setTimeout(async() => { // starting timer of making coffee
                await start(); // calling to send starting commands
                // making_timer = setInterval(makingTime, 100);
            }, 1000);

        });
        $("#stop_button").click(async function() {

            if (!abortWork) {
                await stop();
                // setTimeout(function() { // things to do after 9 minutes progress bar
                // }, 1000); // time of progress bar to complete 100%

                clearInterval(making_timer);
                setTimeout(() => {
                    making_counter = 0;
                    $('#pushed').fadeOut(500); // fadeout the after pushed button
                    $('#making_time').fadeOut(500); // fadeout the after pushed button
                    setTimeout(() => {
                        update_ready = true; // to send data if data changes before the coffee making stops 
                        $('#not-pushed').fadeIn(500); // fadeIn the before pushed button
                        $('.carousel-indicators').fadeIn(500); // showing the carousel
                    }, 500)
                }, 4000)
            }
        });

        //////////////////////////////////////////// starting fading in and out of contents ///////////////////////////////////////
        let logo_fading = 5000; // logo fading time in milliseconds (5 seconds)
        // let logo_fading = 1000; // logo fading time in milliseconds (1 seconds for testing)
        $("#fade1").fadeIn(logo_fading); // removing the div after 5 secs with fading effects
        setTimeout(() => $("#fade1").fadeOut(logo_fading), logo_fading)
            // $("#fade1").fadeOut(5000); // removing the div after 5 secs with fading effects
        setTimeout(function() {
            $('#full-page1').fadeIn(1000); // showing the carousel slides
            let progressBar_time = 1; // time in minutes
            progress_counter = 0;
            progress_bar = setInterval(progressBar, progressBar_time * 600);
        }, 2 * logo_fading); // branding logo fade in fade out time
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        $.fn.roundSlider.prototype._handleDragDistance = 90;

        $("#progress-bar").roundSlider({
            svgMode: true,
            handleShape: "round",
            sliderType: "min-range",
            readOnly: true,
            handleSize: 0,
            showTooltip: true,
            editableTooltip: false,
            min: 0,
            max: 100,
            step: 1,
            value: 1,
            startAngle: 90,
            endAngle: 90,
            radius: 250,
            borderWidth: 0,
            width: 20,
            rangeColor: 'rgba(216, 213, 213, 1)',
            pathColor: 'rgba(216, 213, 213, 0.4)',
            lineCap: 'round',
            tooltipFormat: "tooltipProgress"
        });
        $("#temp-slider").roundSlider({
            svgMode: true,
            handleShape: "round",
            sliderType: "min-range",
            handleSize: 60,
            showTooltip: true,
            editableTooltip: false,
            min: 86,
            max: 94,
            step: 0.1,
            value: $("#temp").val(),
            startAngle: 90,
            endAngle: 90,
            radius: 250,
            borderWidth: 0,
            width: 60,
            rangeColor: 'rgba(153, 102, 114, 1)',
            pathColor: 'rgba(153, 102, 114, 0.4)',
            lineCap: 'round',
            tooltipFormat: "tooltipTemp",
            change: function(args) {
                prev_temperature = parseFloat($("#temp").val()).toFixed(2);
                $("#temp").val(args.value.toString());
                update_ready = true;
                parametersWrite = true; // to update the parameters in disk file
                if (heated == 1 && onState == 1 && !startFlag) {
                    send(Order.TEMPERATURE, (parseFloat($("#temp").val()) * 10));
                    update_ready = false;
                }
                console.log(args.value);
                valueChange = false;
                dragging = false;

                /////////////////////////// For showing the progress bar when temperature changes ///////////////////////////////
                $('#not-pushed').fadeOut(1);
                $('#progress-circle').fadeIn(1); // fadeout the progress bar
                $('.carousel').carousel(0);
                let temp_diff = Math.abs(prev_temperature - parseFloat(args.value).toFixed(2));
                console.log('Temperature difference: ' + temp_diff);
                progress_counter = 0;
                progress_bar = setInterval(progressBar, temp_diff * 1000); // it will show the difference of temperature in progress (10s/0.1 deg)
                // temp_diff * 1000-- > 0.1 * 1000 = 100 mSec for 1 % => 100 ms * 100 % = 10000 mSec

            },
            start: function(args) {
                console.log('My dragging start');
                dragging = true;
                valueChange = true;
            },
            stop: function(args) {
                console.log('I am stopped');
                valueChange = false;
                dragging = false;
            }
        });
        $("#druck-slider").roundSlider({
            svgMode: true,
            handleShape: "round",
            sliderType: "min-range",
            handleSize: 60,
            showTooltip: true,
            editableTooltip: false,
            min: 8,
            max: 10,
            step: 0.1,
            value: $("#druck").val(),
            startAngle: 90,
            endAngle: 90,
            radius: 250,
            borderWidth: 0,
            width: 60,
            rangeColor: 'rgba(102, 123, 153, 1)',
            pathColor: 'rgba(102, 123, 153, 0.4)',
            lineCap: 'round',
            tooltipFormat: "tooltipDruck",
            change: function(args) {
                $("#druck").val(args.value.toString());
                update_ready = true;
                parametersWrite = true; // to update the parameters in disk file
                if (heated == 1 && onState == 1 && !startFlag) {
                    send(Order.PRESSURE, (parseFloat($("#druck").val()) * 10));
                    update_ready = false;
                }
                console.log(args.value);
                valueChange = false;
                dragging = false;
            },
            start: function(args) {
                console.log('My dragging start');
                dragging = true;
                valueChange = true;
            },
            stop: function(args) {
                console.log('I am stopped');
                valueChange = false;
                dragging = false;
            }
        });
        $("#bezug-slider").roundSlider({
            svgMode: true,
            handleShape: "round",
            sliderType: "min-range",
            handleSize: 60,
            showTooltip: true,
            editableTooltip: false,
            min: 15,
            max: 45,
            step: 0.1,
            value: $("#bezug").val(),
            startAngle: 90,
            endAngle: 90,
            radius: 250,
            borderWidth: 0,
            width: 60,
            rangeColor: 'rgba(153, 143, 102, 1)',
            pathColor: 'rgba(153, 143, 102, 0.4)',
            lineCap: 'round',
            tooltipFormat: "tooltipBezug",
            change: function(args) {
                $("#bezug").val(args.value.toString());
                update_ready = true;
                parametersWrite = true; // to update the parameters in disk file
                if (heated == 1 && onState == 1 && !startFlag) {
                    send(Order.TIME, (parseFloat($("#bezug").val()) * 10));
                    update_ready = false;
                }
                console.log(args.value);
                valueChange = false;
                dragging = false;
            },
            start: function(args) {
                console.log('My dragging start');
                dragging = true;
                valueChange = true;
            },
            stop: function(args) {
                console.log('I am stopped');
                valueChange = false;
                dragging = false;
            }
        });
        $("#standBy-slider").roundSlider({

            svgMode: true,
            handleShape: "round",
            sliderType: "min-range",
            handleSize: 60,
            showTooltip: true,
            editableTooltip: false,
            min: 0,
            max: 120,
            step: 5,
            value: $("#standBy").val(),
            startAngle: 90,
            endAngle: 90,
            radius: 250,
            borderWidth: 0,
            width: 60,
            rangeColor: 'rgba(122, 153, 102, 1)',
            pathColor: 'rgba(122, 153, 102, 0.4)',
            lineCap: 'round',
            tooltipFormat: "tooltipStandby",
            change: function(args) {
                $("#standBy").val(args.value.toString());
                update_ready = true;
                parametersWrite = true; // to update the parameters in disk file
                if (heated == 1 && onState == 1 && !startFlag) {
                    send(Order.STANDBY, (parseFloat($("#standBy").val())));
                    update_ready = false;
                }
                console.log(args.value);
                valueChange = false;
                dragging = false;
                console.log('I am changed');
            },
            start: function(args) {
                console.log('My dragging start');
                dragging = true;
                valueChange = true;
            },
            stop: function(args) {
                console.log('I am stopped');
                valueChange = false;
                dragging = false;
            }
        });

        let polling = setInterval(async function() { // it will tell take the response of coffee machine is on and heated in timely basis
            heated = 1;
            onState = 1;
            if (heated == 1 && onState == 1) { //&& polling_allowed == 1

                if (onState == 1 && !dragging) {
                    parametersWrite = false;
                    await send(Order.ONSTATE, 0); // sending to get the state of coffee machine
                    // await send(Order.ERROR, 0); // sending to get if there is an error in coffee machine
                    // await send(Order.HEATING, 0); // sending to get if there is an error in coffee machine

                }

                setTimeout(async function() {
                    if (errorNumber > 1) {
                        // document.getElementById("errorblocker").style.visibility = "visible";
                        // document.getElementById("errorNumber").style.visibility = "visible";
                        // document.getElementById("fill").style.visibility = "hidden";
                        // document.getElementById("errorNumber").innerHTML = "Error #" + errorNumber;
                        // console.log("error");
                    } else if (errorNumber == 1 && showCoffeeFlag) {
                        // document.getElementById("fill").style.visibility = "visible";
                        //document.getElementById("temp1").innerHTML = "Temperatur 1: "+(temperature1/10).toFixed(1) + " °C";
                        //document.getElementById("temp2").innerHTML = "Temperatur 2: "+(temperature2/10).toFixed(1) + " °C";
                        //document.getElementById("pressure").innerHTML = "Druck: "+(pressure/10).toFixed(1) + " bar";
                    } else {
                        // document.getElementById("errorblocker").style.visibility = "hidden";
                        // document.getElementById("errorNumber").style.visibility = "hidden";
                        // document.getElementById("fill").style.visibility = "hidden";
                        //document.getElementById("temp1").innerHTML = "Temperatur 1: "+(temperature1/10).toFixed(1) + " °C";
                        //document.getElementById("temp2").innerHTML = "Temperatur 2: "+(temperature2/10).toFixed(1) + " °C";
                        //document.getElementById("pressure").innerHTML = "Druck: "+(pressure/10).toFixed(1) + " bar";
                    }

                    if (update_ready && !startFlag) {
                        console.log('Sending all parameters to arduino!');
                        parametersWrite = true;
                        await send(Order.TEMPERATURE, (parseFloat($("#temp").val()) * 10));
                        await send(Order.PRESSURE, (parseFloat($("#druck").val()) * 10));
                        await send(Order.TIME, (parseFloat($("#bezug").val()) * 10));
                        await send(Order.STANDBY, (parseFloat($("#standBy").val())));
                        console.log('Sending completed!');
                        parametersWrite = false;
                        update_ready = false;
                    }
                }, 200);
            } else {
                parametersWrite = false;
                console.log('Second running')
                await send(Order.ONSTATE, 0); // sending get the state of coffee machine
                // await send(Order.HEATING, 0); // sending get the state of coffee machine
            }

        }, 5000);
    });
</script>

<style>
    .avoid-clicks {
        pointer-events: none !important;
    }
    
    .fade-page {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
    
    .full-page {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 800px;
        height: 800px;
    }
    
    #fade1 img {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 400px;
        height: 150px;
    }
    
    #myCarousel-indicators {
        width: inherit !important;
        /* height: inherit !important; */
    }
    
    .carousel-inner {
        width: inherit !important;
        /* height: inherit !important; */
        /* height: 95% !important; */
    }
    
    .carousel-item {
        width: 500px !important;
        height: 710px !important;
        margin-top: 45px;
        margin-left: 150px;
        transition-duration: 1s;
        transition: transform 4s ease-in-out;
    }
    
    .carousel-fade .active.carousel-item-start,
    .carousel-fade .active.carousel-item-end {
        transition: opacity 0s 4s;
    }
    /* .carousel-inner>.item {
        -webkit-transition: 31s ease-in-out left;
        -moz-transition: 3s ease-in-out left;
        -o-transition: 3s ease-in-out left;
        transition: 3s ease-in-out left;
    } */
    
    #parameter-name {
        font-family: 'helvetica_neueultralight';
        font-size: 40px;
        margin-bottom: 0px;
    }
    
    .circular-slider {
        width: inherit !important;
        height: 500px !important;
        margin-top: 45px !important;
        margin-bottom: 70px;
    }
    
    #pushed,
    #not-pushed {
        position: absolute;
        width: 500px;
        height: 500px;
        border-radius: 50%;
        margin-top: 105px;
        background: linear-gradient(1.0turn, #090b0d, #2f3742);
    }
    
    #pushed img,
    #not-pushed img {
        width: inherit;
        height: inherit;
        /* background-color: black; */
    }
    
    .start-coffee {
        width: 250px;
        height: 250px;
        margin: 125px;
        /* background-color: black; */
    }
    
    #making_time {
        width: inherit;
    }
    
    #making_time_text {
        color: rgba(216, 213, 213, 1) !important;
        font-family: 'helvetica_neueultralight' !important;
        font-size: 60px;
        /* margin-top: 600px; */
        margin-top: 161px;
        display: flex;
        justify-content: center;
        text-align: center;
    }
    
    .circle-gradient {
        position: absolute;
        width: 380px;
        height: 380px;
        border-radius: 50%;
        margin-top: 105px;
        margin-left: 60px;
        /* background-color: #232932 !important; */
        /* background: rgb(47, 55, 66); */
        /* background: linear-gradient(1deg, rgba(47, 55, 66, 1) 100%, rgba(10, 13, 9, 1) 100%); */
        background: linear-gradient(1.0turn, #090b0d, #2f3742);
    }
    
    .progress-gradient {
        position: absolute;
        width: 460px;
        height: 460px;
        border-radius: 50%;
        margin: 20px;
        background-color: #232932 !important;
        /* background: rgb(47, 55, 66);
        background: linear-gradient(180deg, rgba(47, 55, 66, 1) 10%, rgba(9, 11, 13, 1) 80%); */
        background: linear-gradient(1.0turn, #090b0d, #2f3742);
    }
    
    #myCarousel-indicators ol li {
        border-radius: 100%;
        height: 15px;
        width: 15px;
    }
    
    #myCarousel-indicators ol {
        margin-bottom: 0px !important;
    }
    
    .rs-tooltip-text {
        color: rgba(216, 213, 213, 1) !important;
        font-family: 'helvetica_neueultralight' !important;
        font-size: 80px;
    }
    
    #progress-bar .rs-handle {
        background-color: rgba(216, 213, 213, 1) !important;
    }
    
    #temp-slider .rs-handle {
        background-color: rgba(153, 102, 114, 1) !important;
    }
    
    #bezug-slider .rs-handle {
        background-color: rgba(153, 143, 102, 1) !important;
    }
    
    #druck-slider .rs-handle {
        background-color: rgba(102, 123, 153, 1) !important;
    }
    
    #standBy-slider .rs-handle {
        background-color: rgba(122, 153, 102, 1) !important;
    }
</style>

</html>